from django.db import models
from django.utils import timezone
from django.utils.text import slugify

import uuid
import os

class Subscriber(models.Model):
    email = models.EmailField(blank=False, null=False, unique=True)
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)

    def __str__(self):
        return self.email

class PodcastChannel(models.Model):
    
    # maybe other languages in the works??
    LANGUAGE_CHOICES = (('en-us', 'English (US)'),)
    
    # maybe other languages in the works??
    CATEGORY_CHOICES = (('arts','arts'),
                        ('business','busines'),
                        ('comedy','comedy'),
                        ('education','education'),
                        ('fiction','fiction'),
                        ('government','government'),
                        ('history','history'),
                        ('kids & family','kids & family'),
                        ('leisure','leisure'),
                        ('music','music'),
                        ('religion & spirituality','religion & spirituality'),
                        ('science','science'),
                        ('society & culture','society & culture'),
                        ('sports','sports'),
                        ('technology','technology'),
                        ('true crime','true crime'),
                        ('tv & film','tv & film'),)
    
    title = models.CharField(max_length=255, blank=False, null=False, help_text="Title of the podcast channel")
    description = models.TextField(blank=False, null=False, help_text="Description of the podcast channel")
    link = models.URLField(blank=False, null=False, help_text="Link to the podcast channel site")
    managing_editor = models.EmailField(blank=False, null=False, help_text="Managing editor email")
    web_master = models.EmailField(blank=False, null=False, help_text="Web master email")
    
    # drop down for languages 
    language = models.CharField(
            max_length=8, 
            choices=LANGUAGE_CHOICES,
            default='en-us',
            blank=False, 
            null=False, 
            help_text="language of the podcast")
    
    copyright_info = models.CharField(max_length=255, blank=False, null=False, help_text="Copyright information")
    author = models.CharField(max_length=255, blank=False, null=False, help_text="author name")
    pub_date = models.DateTimeField(default=timezone.now, help_text="Date and time the episode was published")
   
    artwork = models.ImageField(
        upload_to='channel_artwork/', 
        blank=False, 
        null=False, 
        help_text="add artwork"
    )
    
    # itunes specifics
    owner_name = models.CharField(max_length=255, blank=False, null=False, help_text="owner name")
    owner_email = models.EmailField(blank=False, null=False, help_text="owner email")    
    
    #drop down for categories
    category = models.CharField(
            max_length=255,
            choices=CATEGORY_CHOICES,
            default='fiction',
            blank=False, 
            null=False, 
            help_text="use categories that itunes likes")
    
    explicit = models.BooleanField(default=False, help_text="Is the content explicit?")

    def __str__(self):
        return self.title

class PodcastEpisode(models.Model):
    # needed system fields
    channel = models.ForeignKey(PodcastChannel, on_delete=models.CASCADE, related_name='episodes')
    pub_date = models.DateTimeField(default=timezone.now, help_text="Date and time the episode was published")

    # rss feed fields start here
    title = models.CharField(max_length=255, blank=False, null=False, help_text="Title of the podcast episode")
    description = models.TextField(blank=False, null=False, help_text="Detailed description of the episode")
    link = models.URLField(blank=False, null=False, help_text="Link to site of podcast")
    guid = models.UUIDField(default=uuid.uuid4, editable=False, unique=True, help_text="Autogenerated GUId")
    
    # enclosure specifics below
    file_length = models.IntegerField(blank=True, null=True, help_text="Length of the audio file in bytes")
    file_type = models.CharField(max_length=50, default="audio/mpeg", help_text="Content type of the audio file")
    
    file = models.FileField(
        upload_to='episodes_audio/',
        blank=False,
        null=False,
        help_text="add audio"
    )
    
    def __str__(self):
        return self.title

    class Meta:
        ordering = ['-pub_date']
    
    def save(self, *args, **kwargs):
        if self.enclosure_url and not self.enclosure_url.startswith('http'):
            try:
                from django.conf import settings
                file_path = os.path.join(settings.MEDIA_ROOT, self.enclosure_url)
                self.enclosure_length = os.path.getsize(file_path)
            except Exception as e:
                print(f"Error getting file size: {e}")
        super().save(*args, **kwargs)
