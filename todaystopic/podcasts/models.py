from django.db import models
from django.utils import timezone
from django.utils.text import slugify

import uuid
import os

class PodcastChannel(models.Model):
    title = models.CharField(max_length=255, blank=False, null=False, help_text="Title of the podcast channel")
    description = models.TextField(blank=False, null=False, help_text="Description of the podcast channel")
    link = models.URLField(blank=False, null=False, help_text="Link to sit of the podcast channel")
    managing_editor = models.EmailField(blank=False, null=False, help_text="Managing editor email")
    web_master = models.EmailField(blank=False, null=False, help_text="Web master email")
    copyright_info = models.CharField(max_length=255, blank=False, null=False, help_text="Copyright information")
    author = models.CharField(max_length=255, blank=False, null=False, help_text="author name")
    owner_name = models.CharField(max_length=255, blank=False, null=False, help_text="owner name")
    owner_email = models.EmailField(blank=False, null=False, help_text="owner email")
    category = models.CharField(max_length=255, blank=False, null=False, help_text="iTunes category")
    
    artwork = models.ImageField(
        upload_to=lambda instance, filename: media_directory_path(instance,filename, 'channel_image'), 
        blank=False, 
        null=False, 
        help_text="add artwork"
    )

    def __str__(self):
        return self.title

class PodcastEpisode(models.Model):
    title = models.CharField(max_length=255, blank=False, null=False, help_text="Title of the podcast episode")
    description = models.TextField(blank=False, null=False, help_text="Detailed description of the episode")
    link = models.URLField(blank=False, null=False, help_text="Link to site of podcast")
    guid = models.UUIDField(default=uuid.uuid4, editable=False, unique=True, help_text="Autogenerated GUId")
    pub_date = models.DateTimeField(default=timezone.now, help_text="Date and time the episode was published")
    duration = models.CharField(max_length=20, blank=True, null=True, help_text="Duration of the audio (e.g., '1:30:00')")
    explicit = models.BooleanField(default=False, help_text="Is the content explicit?")
    file_length = models.IntegerField(blank=True, null=True, help_text="Length of the audio file in bytes")
    file_type = models.CharField(max_length=50, default="audio/mpeg", help_text="Content type of the audio file")
    
    file = models.FileField(
        upload_to=lambda instance, filename: media_directory_path(instance, filename, 'episode_audio'),
        blank=False,
        null=False,
        help_text="URL of the audio file"
    )
    
    artwork = models.ImageField(
        upload_to=lambda instance, filename: media_directory_path(instance, filename, 'episode_image'),
        blank=False,
        null=False,
        help_text="Episode artwork"
    )

    def __str__(self):
        return self.title

    class Meta:
        ordering = ['-pub_date']
    
    def save(self, *args, **kwargs):
        if self.enclosure_url and not self.enclosure_url.startswith('http'):
            try:
                from django.conf import settings
                file_path = os.path.join(settings.MEDIA_ROOT, self.enclosure_url)
                self.enclosure_length = os.path.getsize(file_path)
            except Exception as e:
                print(f"Error getting file size: {e}")
        super().save(*args, **kwargs)

def podcast_episode_directory_path(instance, filenamei, usage):
    if usage == 'channel_image':
        return f'{slugify(instance.title)}/artwork/{filename}'
    elif usage == 'episode_image':
        return f'{slugify(instance.channel.title)}/{slugify(instance.title)}/artwork/{filename}'
    elif usage == 'episode_audio':
        return f'{slugify(instance.channel.title)}/{slugify(instance.title)}/audio/{filename}'

